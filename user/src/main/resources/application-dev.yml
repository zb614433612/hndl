logging:
  level:
    com.alibaba.nacos.client.naming: WARN
    com.alibaba.nacos.client.config.impl: WARN

#mybatis配置------------------------------------------------
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.zbdemo.hndl.user
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
#分页插件配置-------------------------------------------------
pagehelper:
  helper-dialect: mysql
  params: count=countSql
  reasonable: false
  support-methods-arguments: true
#-----------------------------------------------------------------------
Spring:
  application:
    name: user
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.1.157:8848
    # rocketMQ配置
    stream:
      bindings:
        log-input:
          # rocketmq 的topic
          destination: LOG-TOPIC-01
          # 消息内容格式
          content-type: application/json
          # 消费者组 命名规则 组名+topic名
          group: log-consumer-LOG-TOPIC-01
      rocketmq:
        binder:
          name-server: 192.168.1.157:9876
        bindings:
          log-input:
            consumer:
              # 是否开启消费,默认为true
              enabled: true
              # 是否使用广播消费,默认为false使用集群消费
              broadcasting: false
  #配置redis连接----------------------------------------------------------
  redis:
    database: 0
    host: 192.168.1.157
    port: 6379
    password: 123456
    #springboot2.0以上的版本默认使用的是lettuce redis客户端，如果想使用jedis客户端，则需把lettuce依赖进行排除以及手动引入jedis依赖
    lettuce:
      pool:
        max-active: 20  #连接池最大连接数
        max-wait: -1   #最大阻塞时间，-1没限制
        max-idle: 10  #最大空闲连接
        min-idle: 0  #最小空闲连接
    timeout: 3000  #超时
  #多数据源需要配置--------------------------------------------------------------------
  #如果在service方法上添加数据源，在方法内写循环，写mapper，此时可能出现指定数据源只出现一次的情况。
  #方案：需要写一个公共的service，此service专用于查询mapper，每个mapper一个方法，每个方法一个注解。
  #多数据源使用以下方法贴在类或者方法上
  #  @DataSource(name = DataSourceNames.FIRST)
  #  @DataSource(name = DataSourceNames.SECOND)
  #  @DataSource(name = DataSourceNames.THIRD)
  main:
    allow-bean-definition-overriding: true
  # druid数据源配置，多数据源连接参数可以统一配置，也可以在数据源下一级别单独配置！我这里统一配置！比较常用的单独配置
  datasource:
    url: jdbc:mysql://192.168.1.157:3306/hndl?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
    username: root
    password: Zb960321
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      #druid内置过滤器;stat对SQL监控;wall开启防火墙防止SQL注入;这里使用这种方式进行默认配置
      #（第一个 stat必须，否则监控不到SQL）
      filters: stat,wall,config
        #如果需要自定义配置参考如下
        #filter:
        #配置StatFilter (SQL监控配置)
        #stat:
        #enabled: true
        #db-type: mysql
        # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中
        #log-slow-sql: true
        #slow-sql-millis: 2000
        # 日志监控，使用slf4j 进行日志输出
        #slf4j:
        #enabled: true
        #statement-log-error-enabled: true
        #statement-create-after-log-enabled: false
        #statement-close-after-log-enabled: false
        #result-set-open-after-log-enabled: false
        #result-set-close-after-log-enabled: false
        #wall:
        #enabled: true #开启防火墙
        #config:
        #update-allow: true #允许更新操作
        #drop-table-allow: false #禁止删表操作
      #insert-allow: true #允许插入操作
      #delete-allow: true #删除数据操作
      #最大连接数量;后面三项总和不能超过这个数值包含activeCount：正在使用的连接；poolingCount：连接池中的空闲连接；createTaskCount：正在生成的连接；
      max-active: 50
      #数据库连接池初始化的时候连接初始化的数量
      initial-size: 5
      #从连接池中获取连接的最大等待时间，单位ms
      max-wait: 60000
      #连接池中的最小空闲连接数，Druid会定时扫描连接池的连接，如果空闲的连接数大于该值，则关闭多余的连接，反之则创建更多的连接以满足最小连接数要求。
      min-idle: 1
      #根据min-idle回收连接池周期，单位ms！回收：空闲，泄露
      time-between-eviction-runs-millis: 60000
      #连接保持空闲而不被驱逐的最小和最大存活时间，单位ms
      min-evictable-idle-time-millis: 300000
      max-evictable-idle-time-millis: 900000
      #Druid用来测试连接是否可用的SQL语句,默认值每种数据库都不相同
      #Mysql:SELECT 1;
      #SQLSERVER:SELECT 1;
      #ORACLE:SELECT 'x' FROM DUAL;
      #PostGresql:SELECT 'x';
      validation-query: SELECT 1
      #testOnBorrow和testOnReturn在生产环境一般是不开启的，主要是性能考虑。失效连接主要通过testWhileIdle保证
      # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
      test-while-idle: true
      # 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
      test-on-borrow: false
      # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用
      test-on-return: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle
      pool-prepared-statements: true
      # 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
      # 可以把这个数值配置大一些，比如说100
      max-open-prepared-statements: 50
      max-pool-prepared-statement-per-connection-size: 20
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: true
      web-stat-filter:
        enabled: true                   # 启动 StatFilter
        url-pattern: /*                 # 过滤所有url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" # 排除一些不必要的url
        session-stat-enable: true       # 开启session统计功能
        session-stat-max-count: 1000    # session的最大个数,默认100
      stat-view-servlet:
        url-pattern: /druid/*           # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        # 设置ip白名单
        allow: 127.0.0.1
        # 设置ip黑名单，优先级高于白名单
        deny:
        # 设置控制台管理用户
        #        login-username: root
        #        login-password: root
        # 是否可以重置数据
        reset-enable: false
        # 开启druid监控页面
        enabled: true
        login-username: admin            # 配置监控页面访问密码
        login-password: 123456

# 自定义配置
custom:
  # token 过期时间(秒)  2小时
  tokenOutTime: 7200
  # 用户密码登录随机码长度
  userLoginCodeLen: 5
  # 随机码过期时间(秒)
  userCodeTime: 120
  # 用户密码登录随机码前缀标识
  userCodeHead: userLoginCode
  # 用户默认密码
  userPassword: 123456